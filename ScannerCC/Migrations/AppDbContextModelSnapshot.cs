// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScannerCC.Models;

#nullable disable

namespace QualityScout.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ScannerCC.Models.BotellaDetalles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlturaBotella")
                        .HasColumnType("int");

                    b.Property<int>("AnchoBotella")
                        .HasColumnType("int");

                    b.Property<string>("NombreBotella")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BotellaDetalle");
                });

            modelBuilder.Entity("ScannerCC.Models.Controles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoFinal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaHoraControlFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaHoraPrimerControl")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdProductos")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuarios")
                        .HasColumnType("int");

                    b.Property<string>("Linea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaisDestino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipodecontrol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdProductos");

                    b.HasIndex("IdUsuarios");

                    b.ToTable("Controles");
                });

            modelBuilder.Entity("ScannerCC.Models.Escaneos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Hora")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdProductos")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuarios")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProductos");

                    b.HasIndex("IdUsuarios");

                    b.ToTable("Escaneo");
                });

            modelBuilder.Entity("ScannerCC.Models.InformacionQuimica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cepa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MaxAzucar")
                        .HasColumnType("real");

                    b.Property<float>("MaxDensidad")
                        .HasColumnType("real");

                    b.Property<float>("MaxGradoAlcohol")
                        .HasColumnType("real");

                    b.Property<float>("MaxSulfuroso")
                        .HasColumnType("real");

                    b.Property<float>("MinAzucar")
                        .HasColumnType("real");

                    b.Property<float>("MinDensidad")
                        .HasColumnType("real");

                    b.Property<float>("MinGradoAlcohol")
                        .HasColumnType("real");

                    b.Property<float>("MinSulfuroso")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("InformacionQuimica");
                });

            modelBuilder.Entity("ScannerCC.Models.Informes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enfoque")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUsuarios")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Informe");
                });

            modelBuilder.Entity("ScannerCC.Models.ProductoDetalles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("ColorBotella")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorCapsula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdBotellaDetalles")
                        .HasColumnType("int");

                    b.Property<int>("IdProductos")
                        .HasColumnType("int");

                    b.Property<bool>("Medalla")
                        .HasColumnType("bit");

                    b.Property<int>("MedidaEtiquetaABase")
                        .HasColumnType("int");

                    b.Property<int>("MedidaEtiquetaABoquete")
                        .HasColumnType("int");

                    b.Property<string>("TipoBotella")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoCapsula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoCorcho")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEtiqueta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdBotellaDetalles");

                    b.HasIndex("IdProductos");

                    b.ToTable("ProductoDetalle");
                });

            modelBuilder.Entity("ScannerCC.Models.ProductoHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCosecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEnvasado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaProduccion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdProductos")
                        .HasColumnType("int");

                    b.Property<int>("ProductosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductosId");

                    b.ToTable("ProductoHistorial");
                });

            modelBuilder.Entity("ScannerCC.Models.Productos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("CodigoBarra")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoVE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescripcionCapsula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdInformacionQuimica")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuarios")
                        .HasColumnType("int");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InformacionQuimicaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaisDestino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URLImagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InformacionQuimicaId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("ScannerCC.Models.Rol", b =>
                {
                    b.Property<int>("idRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRol"));

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idRol");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("ScannerCC.Models.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("Rut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("ScannerCC.Models.Controles", b =>
                {
                    b.HasOne("ScannerCC.Models.Productos", "Productos")
                        .WithMany()
                        .HasForeignKey("IdProductos")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScannerCC.Models.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("IdUsuarios")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Productos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ScannerCC.Models.Escaneos", b =>
                {
                    b.HasOne("ScannerCC.Models.Productos", "Productos")
                        .WithMany()
                        .HasForeignKey("IdProductos")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScannerCC.Models.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("IdUsuarios")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Productos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ScannerCC.Models.Informes", b =>
                {
                    b.HasOne("ScannerCC.Models.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ScannerCC.Models.ProductoDetalles", b =>
                {
                    b.HasOne("ScannerCC.Models.BotellaDetalles", "BotellaDetalles")
                        .WithMany()
                        .HasForeignKey("IdBotellaDetalles")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScannerCC.Models.Productos", "Productos")
                        .WithMany()
                        .HasForeignKey("IdProductos")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BotellaDetalles");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("ScannerCC.Models.ProductoHistorial", b =>
                {
                    b.HasOne("ScannerCC.Models.Productos", "Productos")
                        .WithMany()
                        .HasForeignKey("ProductosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("ScannerCC.Models.Productos", b =>
                {
                    b.HasOne("ScannerCC.Models.InformacionQuimica", "InformacionQuimica")
                        .WithMany()
                        .HasForeignKey("InformacionQuimicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScannerCC.Models.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InformacionQuimica");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ScannerCC.Models.Usuarios", b =>
                {
                    b.HasOne("ScannerCC.Models.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });
#pragma warning restore 612, 618
        }
    }
}
