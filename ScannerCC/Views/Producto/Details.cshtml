@model ScannerCC.Models.Productos

@{
    ViewData["Title"] = "Details";
}

<style>
    body {
        background-color: #242424;
        color: white;
    }

    .container {
        text-align: center;
    }

    a {
        color: white;
    }

        a:hover {
            color: #62EBF0;
        }

    .active {
        color: aquamarine;
    }

    .True {
        color: aquamarine;
    }

    .False {
        color: red;
    }
    .inactive {
        color: red;
    }
</style>

<h1 class="mt-3 mb-5">Información completa del producto</h1>

<div class="container">
    <dl class="row justify-content-center g-5 me-3">
        <!-- Columna 1 -->
        <div class="col-sm-4">
            <h5>Información del producto</h5>
            <hr/>
            <div class="row"  >
                <dt class="col-sm-6">Nombre del usuario</dt>
                <dd class="col-sm-6">@Html.DisplayFor(model => model.Usuarios.Nombre)</dd>

                <dt class="col-sm-6">Nombre del producto</dt>
                <dd class="col-sm-6">@Html.DisplayFor(model => model.Nombre)</dd>

                <dt class="col-sm-6">Código de barra</dt>
                <dd class="col-sm-6">@Html.DisplayFor(model => model.CodigoBarra)</dd>

                <dt class="col-sm-6">Código VE</dt>
                <dd class="col-sm-6">@Html.DisplayFor(model => model.CodigoVE)</dd>

                <dt class="col-sm-6">País de destino</dt>
                <dd class="col-sm-6">@Html.DisplayFor(model => model.PaisDestino)</dd>

                <dt class="col-sm-6">Fecha de registro</dt>
                <dd class="col-sm-6">@Html.DisplayFor(model => model.FechaRegistro)</dd>

                <dt class="col-sm-6">Idioma</dt>
                <dd class="col-sm-6">@Html.DisplayFor(model => model.Idioma)</dd>

                <dt class="col-sm-6">Unidad de medida</dt>
                <dd class="col-sm-6">@Html.DisplayFor(model => model.UnidadMedida)</dd>

                <dt class="col-sm-6">Activo</dt>
                <dd class="col-sm-6">
                    @{
                        var activo = Model.Activo ? "Sí" : "No";
                        var statusClass = Model.Activo ? "active" : "inactive";
                    }
                    <span class="@statusClass">@activo</span>
                </dd>

                <dt>URL de la imagen</dt>
                <dd>
                    <span title="@Model.URLImagen" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; display: inline-block; max-width: 100%;">@Model.URLImagen</span>
                </dd>


                <dt class="col-sm-6">Descripción de la cápsula</dt>
                <dd class="col-sm-6">@Html.DisplayFor(model => model.DescripcionCapsula)</dd>
            </div>
        </div>

        <!-- Columna 2 -->
        <div class="col-sm-4">
            <h5>Detalles de la información química</h5>
            <hr />
            <div class="row">
            @if (Model.InformacionQuimica != null)
            {
                <dt class="col-sm-6">Cepa</dt>
                <dd class="col-sm-6">@Model.InformacionQuimica.Cepa</dd>

                <dt class="col-sm-6">Azúcar</dt>
                <dd class="col-sm-6">
                    <div>
                        <span>Máximo: @Model.InformacionQuimica.MaxAzucar</span><br />
                        <span>Mínimo: @Model.InformacionQuimica.MinAzucar</span>
                    </div>
                </dd>

                <dt class="col-sm-6">Sulfuroso</dt>
                <dd class="col-sm-6">
                    <div>
                        <span>Máximo: @Model.InformacionQuimica.MaxSulfuroso</span><br />
                        <span>Mínimo: @Model.InformacionQuimica.MinSulfuroso</span>
                    </div>
                </dd>

                <dt class="col-sm-6">Densidad</dt>
                <dd class="col-sm-6">
                    <div>
                        <span>Máximo: @Model.InformacionQuimica.MaxDensidad</span><br />
                        <span>Mínimo: @Model.InformacionQuimica.MinDensidad</span>
                    </div>
                </dd>

                <dt class="col-sm-6">Grado de alcohol</dt>
                <dd class="col-sm-6">
                    <div>
                        <span>Máximo: @Model.InformacionQuimica.MaxGradoAlcohol</span><br />
                        <span>Mínimo: @Model.InformacionQuimica.MinGradoAlcohol</span>
                    </div>
                </dd>
            }
            </div>
        </div>

        <!-- Columna 3 -->
        <div class="col-sm-4">
            <h5>Detalles de la botella</h5>
            <hr />
            <div class="row">
            @if (Model.ProductoDetalles != null && Model.ProductoDetalles.Any())
            {
                foreach (var detalleB in Model.ProductoDetalles)
                {
                    <dt class="col-sm-6">Nombre de la botella</dt>
                    <dd class="col-sm-6">@detalleB.BotellaDetalles.NombreBotella</dd>

                    <dt class="col-sm-6">Altura de la botella</dt>
                    <dd class="col-sm-6">@detalleB.BotellaDetalles.AlturaBotella</dd>

                    <dt class="col-sm-6">Ancho de la botella</dt>
                    <dd class="col-sm-6">@detalleB.BotellaDetalles.AnchoBotella</dd>
                }
            }
                else
                {
                    <dd class="col-sm-6">No hay detalles de la botella disponible.</dd>
                }
            </div>
        </div>

        <!-- Columna 4 -->
        <div class="col-sm-6">
            <h5>Detalles del producto</h5>
            <hr />
            <div class="row">
            @if (Model.ProductoDetalles != null && Model.ProductoDetalles.Any())
            {
                foreach (var detalle in Model.ProductoDetalles)
                {
                        <dt class="col-sm-6">Color de la botella</dt>
                        <dd class="col-sm-6">@detalle.ColorBotella</dd>

                        <dt class="col-sm-6">Capacidad</dt>
                        <dd class="col-sm-6">@detalle.Capacidad</dd>

                        <dt class="col-sm-6">Tipo de cápsula</dt>
                        <dd class="col-sm-6">@detalle.TipoCapsula</dd>

                        <dt class="col-sm-6">Color de la cápsula</dt>
                        <dd class="col-sm-6">@detalle.ColorCapsula</dd>

                        <dt class="col-sm-6">Medalla</dt>
                        <dd class="col-sm-6">
                            @{
                                var medalla = detalle.Medalla ? "Sí" : "No";
                                var medallaStatus = detalle.Medalla ? "True" : "False";
                            }
                            <span class="@medallaStatus">@medalla</span>
                        </dd>

                        <dt class="col-sm-6">Tipo de etiqueta</dt>
                        <dd class="col-sm-6">@detalle.TipoEtiqueta</dd>

                        <dt class="col-sm-6">Medida de etiqueta a boquete</dt>
                        <dd class="col-sm-6">@detalle.MedidaEtiquetaABoquete</dd>

                        <dt class="col-sm-6">Medida de etiqueta a base</dt>
                        <dd class="col-sm-6">@detalle.MedidaEtiquetaABase</dd>

                        <dt class="col-sm-6">Tipo de corcho</dt>
                        <dd class="col-sm-6">@detalle.TipoCorcho</dd>
                }
            }
                else
                {
                    <dd class="col-sm-6">No hay detalles del producto disponible.</dd>
                }
            </div>
        </div>

        <!-- Columna 5 -->
        <div class="col-sm-6">
            <h5>Historial del producto</h5>
            <hr />
            <div class="row">
            @if (Model.ProductoHistorial != null && Model.ProductoHistorial.Any())
            {
                foreach (var historial in Model.ProductoHistorial)
                {
                    <dt class="col-sm-6">Fecha de cosecha</dt>
                    <dd class="col-sm-6">@historial.FechaCosecha.ToShortDateString()</dd>

                    <dt class="col-sm-6">Fecha de producción</dt>
                    <dd class="col-sm-6">@historial.FechaProduccion.ToShortDateString()</dd>

                    <dt class="col-sm-6">Fecha de envasado</dt>
                    <dd class="col-sm-6">@historial.FechaEnvasado.ToShortDateString()</dd>
                }
            }
                else
                {
                    <dd class="col-sm-6">No hay un historial del producto disponible.</dd>
                }
            </div>
        </div>
    </dl>
</div>
<div>
    @if (Model.Activo && User.IsInRole("Especialista"))
    {
        <a style="margin-right: 20px;" asp-action="Edit" asp-route-id="@Model?.Id">Editar</a>
    }

    <a style="margin-left: 20px;" asp-action="Index" asp-controller="Home">Volver a la lista</a>
</div>


@*<script src="https://cdn.jsdelivr.net/npm/@@tensorflow/tfjs"></script>
<script src="https://cdn.jsdelivr.net/npm/@@tensorflow-models/coco-ssd"></script>
<div class="col-sm-4">
    <div class="row justify-content-center">

        <div style="text-align:center;" id="deteccion"></div>

        <div style="flex: 1;">
            <h2>Vista Reconocimiento</h2>
            <video id="video" width="640" height="480" autoplay></video>
        </div>
        <div style="flex: 1;">
            <canvas id="canvas" width="640" height="480"></canvas>
        </div>




    </div>
</div>

<script>
    async function detectObjects() {
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        // Cargar el modelo preentrenado COCO-SSD
        const model = await cocoSsd.load();

        // Dimensiones físicas estimadas del objeto en metros
        const objectWidth = 0.02;  // Ancho del objeto en metros
        const objectHeight = 0.2;// Altura del objeto en metros
        const assumedDistance = 0.25; // Distancia estimada de la cámara al objeto en metros

        // Obtener el stream de la cámara
        const stream = await navigator.mediaDevices.getUserMedia({ video: {} });
        video.srcObject = stream;

        // Esperar a que la cámara cargue y realizar la detección en bucle
        video.addEventListener('loadeddata', async () => {
            while (true) {
                // Realizar la detección de objetos
                const predictions = await model.detect(video);

                // Dibujar las predicciones en el canvas
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                predictions.forEach(prediction => {
                    ctx.beginPath();
                    ctx.rect(
                        prediction.bbox[0],
                        prediction.bbox[1],
                        prediction.bbox[2],
                        prediction.bbox[3]
                    );
                    ctx.lineWidth = 2;
                    ctx.strokeStyle = 'red';
                    ctx.fillStyle = 'red';
                    ctx.stroke();
                    ctx.fillText(
                        `${prediction.class} (${Math.round(prediction.score * 100)}%)`,
                        prediction.bbox[0],
                        prediction.bbox[1] > 10 ? prediction.bbox[1] - 5 : 10
                    );

                    // Calcular dimensiones estimadas en metros
                    const estimatedWidth = (objectWidth * canvas.width) / prediction.bbox[2];
                    const estimatedHeight = (objectHeight * canvas.height) / prediction.bbox[3];

                    // Mostrar dimensiones estimadas en el HTML
                    const infoDiv = document.getElementById('deteccion');

                    if (prediction.class == "bottle") {
                        infoDiv.innerHTML = "";
                        infoDiv.innerHTML = `
                                <p>Object: ${prediction.class}</p>
                                <p>Estimated Width: ${estimatedWidth.toFixed(2)} meters</p>
                                <p>Estimated Height: ${estimatedHeight.toFixed(2)} meters</p>
                            `;
                    }


                });

                // Esperar un breve periodo antes de la próxima detección
                await new Promise(resolve => requestAnimationFrame(resolve));
            }
        });
    }

    // Iniciar la detección de objetos cuando la ventana haya cargado completamente
    window.onload = detectObjects;

</script>*@
