@{
    Layout = null;
}

<style>
    .dashboard-container {
        display: grid;
        grid-template-columns: 2fr 1fr;
        grid-template-rows: auto auto;
        gap: 20px;
        padding: 20px;
    }

    .chart-container {
        padding: 15px;
        border-radius: 8px;
        text-align: center;
    }

        .chart-container.large {
            grid-row: span 2;
        }

        .chart-container.small {
            height: 100%;
        }

    #mapaPaises {
        height: 100%;
        width: 100%;
        border-radius: 8px;
    }

    h3 {
        font-family: Arial;
        font-size: 1rem;
        margin-bottom: 10px;
    }
</style>

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="~/Extras/favicon.png" type="image/x-icon">
    <title>QS - Dashboard</title>
    <link rel="stylesheet" href="~/css/Dashboard.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-piechart-outlabels"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
</head>
<body>
    <header>
        <nav class="nav-i">
            <a href="@Url.Action("RedirigirSegunRol", "Home")">
                <img class="logoqs" src="~/Extras/QualityScoutLogo.png" alt="Logo de Quality Scout">
            </a>
            <div class="navstyle">
                <div class="iconosnav">
                    <a asp-action="Index" asp-controller="Especialista">
                        <img src="~/Extras/home.png" alt="Inicio" />
                    </a>
                </div>
                <div class="iconosnav">
                    <a asp-action="GestionUsuarios" asp-controller="Usuario">
                        <img src="~/Extras/usuarios.png" alt="Usuarios" />
                    </a>
                </div>
                <div class="iconosnav">
                    <a asp-action="Controles" asp-controller="Controles">
                        <img src="~/Extras/controles.png" alt="Controles" />
                    </a>
                </div>
                <div class="iconosnav">
                    <a asp-action="GestionProductos" asp-controller="Producto">
                        <img src="~/Extras/productos.png" alt="Productos" />
                    </a>
                </div>
                <div class="iconosnav">
                    <a asp-action="GestionInformes" asp-controller="Informes">
                        <img src="~/Extras/Informes.png" alt="Informes" />
                    </a>
                </div>
                <div class="iconosnav">
                    <a asp-action="GestionEscaneos" asp-controller="Escaneos">
                        <img src="~/Extras/escaner.png" alt="Informes" />
                    </a>
                </div>
            </div>
            <div class="login-btn">
                <div class="div2">
                        <img class="icono-lapiz" src="~/Extras/especialista.png" alt="Especialista">
                        <div class="welcome-container">
                            <span class="welcome-text">Bienvenido!</span>
                        <p style="font-size:12px;">@GetFirstNameAndSurnameB(ViewBag.trab.Nombre)</p>

                        @functions {
                            public string GetFirstNameAndSurnameB(string fullName)
                            {
                                if (string.IsNullOrEmpty(fullName))
                                {
                                    return string.Empty;
                                }

                                var nameParts = fullName.Split(' ');

                                if (nameParts.Length >= 2)
                                {
                                    return nameParts[0] + " " + nameParts[2];
                                }

                                return nameParts[0];
                            }
                        }
                        <p style="font-size:12px;">Especialista</p>
                        </div>
                </div>
                <button id="showOptionUser" onclick="showOptionUser()">
                    <i class="fa-solid fa-caret-down"></i>
                </button>
                <div id="opcionesUser" style="display: none">
                    <ul>
                        <li>
                            <a style="color:white;" asp-action="Details" asp-controller="Usuario" asp-route-id="@ViewBag.trab.Id">
                                Editar usuario
                            </a>
                        </li>

                        <li>
                            <a asp-controller="Auth" asp-action="LogOut" class="dropdown-item" style="color:red; text-decoration:none;">
                                Cerrar sesión
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="content">
        <div class="content">
            <h2 class="accesotitulo">Dashboard</h2>
            <div class="dashboard-container">
                <div class="chart-container large">
                    <h3>PRODUCTOS POR PAÍS DE DESTINO</h3>
                    <canvas id="productosPorPais" style="width: 500px; height: 450px; "></canvas>
                </div>
                <div class="chart-container small">
                    <h3>DESTINOS</h3>
                    <div id="mapaPaises" style="height: 300px; "></div>
                </div>
                <div class="chart-container small">
                    <h3>RECHAZOS DE CONTROLES MENSUALES</h3>
                    <canvas id="rechazosMensuales" style="height: 300px; "></canvas>
                </div>
                <div class="chart-container large">
                    <h3>VARIEDAD DE PRODUCTOS</h3>
                    <canvas id="variedades" style="width: 500px; height: 400px; "></canvas>
                </div>
                <div class="chart-container small">
                    <h3>RECHAZOS POR PAÍS</h3>
                    <canvas id="rechazosPorPais" style="height: 300px; "></canvas>
                </div>
                <div class="chart-container small">
                    <h3>PRODUCCIÓN MENSUAL</h3>
                    <canvas id="produccionMensual" style="height: 300px; "></canvas>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Datos para Productos por país
        var productosPorPais = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.ProductosPorPais));
        var paises = productosPorPais.map(p => p.Pais);
        var cantidades = productosPorPais.map(p => p.Cantidad);

        new Chart(document.getElementById('productosPorPais'), {
            type: 'bar',
            data: {
                labels: paises,
                datasets: [{
                    label: 'Productos',
                    data: cantidades,
                    backgroundColor: [
                        '#BF6565',
                        '#F25757',
                        '#260202'
                    ],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: {
                        display: false,
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return `${context.dataset.label}: ${context.raw}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        title: {
                            display: false,
                        },
                        ticks: {
                            font: {
                                weight: 'bold',
                                size: 13
                            }
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'BOTELLAS/PRODUCTOS',
                            font: {
                                weight: 'bold',
                                size: 20
                            }
                        }
                    }
                }
            }
        });


        // Datos para Rechazos mensuales con el nombre del mes
        var rechazosMensuales = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.RechazosMensuales));
        function capitalizarMes(mes) {
            return mes.charAt(0).toUpperCase() + mes.slice(1).toLowerCase();
        }
        var mesesRechazos = rechazosMensuales.map(r => capitalizarMes(r.Mes));
        var rechazos = rechazosMensuales.map(r => r.Rechazos);

        new Chart(document.getElementById('rechazosMensuales'), {
            type: 'line',
            data: {
                labels: mesesRechazos,
                datasets: [{
                    label: 'Rechazos',
                    data: rechazos,
                    borderColor: '#F25757',
                    fill: false,
                    pointRadius: 4,
                    pointBackgroundColor: '#F25757',
                    pointBorderWidth: 3,
                    pointHoverRadius: 6,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            padding: 10
                        }
                    },
                    x: {
                        ticks: {
                            padding: 10,
                            autoSkip: false,
                            font: {
                                weight: 'bold',
                                size: 13
                            }
                        },
                        offset: true
                    }
                }
            }
        });

        // Datos para Variedades
        var variedades = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Variedades));
        var nombres = variedades.map(v => v.Nombre);
        var porcentajesVariedades = variedades.map(v => v.Porcentaje);

        new Chart(document.getElementById('variedades'), {
            type: 'doughnut',
            data: {
                labels: nombres,
                datasets: [{
                    label: 'Variedades (%)',
                    data: porcentajesVariedades,
                    backgroundColor: [
                        '#F25757',
                        '#260202',
                        '#BF6565'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                return tooltipItem.label + ': ' + tooltipItem.raw.toFixed(2) + '%';
                            }
                        }
                    },
                    datalabels: {
                        color: '#FFFFFF',
                        formatter: (value, context) => {
                            const label = context.chart.data.labels[context.dataIndex];
                            return `${label}\n${value.toFixed(2)}%`;
                        },
                        align: 'start',
                        anchor: 'start',
                        offset: -120,
                        clamp: false,
                        font: {
                            size: 16,
                            weight: 'bold',
                            color: '#FFFFFF'
                        }
                    }
                },
                cutout: '50%',
                layout: {
                    padding: {
                        top: 8,
                        right: 30,
                        bottom: 8,
                        left: 30
                    }
                }
            },
            plugins: [ChartDataLabels]
        });

        // Datos para Rechazos por país
        var rechazosPorPais = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.RechazosPorPais));
        var paisesRechazos = rechazosPorPais.map(r => r.Pais);
        var cantidadesRechazos = rechazosPorPais.map(r => r.Cantidad);
        new Chart(document.getElementById('rechazosPorPais'), {
            type: 'bar',
            data: {
                labels: paisesRechazos,
                datasets: [{
                    label: 'Rechazos',
                    data: cantidadesRechazos,
                    backgroundColor: [
                        '#BF6565',
                        '#F25757',
                        '#260202'
                    ],
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return `${context.dataset.label}: ${context.raw}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            padding: 10,
                            font: {
                                weight: 'bold',
                                size: 13
                            }
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'RECHAZOS',
                            font: {
                                weight: 'bold',
                                size: 20
                            }
                        },
                        beginAtZero: true,
                        ticks: {
                            padding: 10
                        }
                    }
                }
            }
        });

        // Datos para Producción mensual con el nombre del mes
        var produccionMensual = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.ProduccionMensual));
        function capitalizarMes(mes) {
            return mes.charAt(0).toUpperCase() + mes.slice(1).toLowerCase();
        }
        var mesesProduccion = produccionMensual.map(p => capitalizarMes(p.Mes));
        var produccion = produccionMensual.map(p => p.Produccion);

        new Chart(document.getElementById('produccionMensual'), {
            type: 'line',
            data: {
                labels: mesesProduccion,
                datasets: [{
                    label: 'Producción',
                    data: produccion,
                    borderColor: '#F25757',
                    fill: false,
                    pointRadius: 4,
                    pointBackgroundColor: '#F25757',
                    pointBorderWidth: 3,
                    pointHoverRadius: 6,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            padding: 10
                        }
                    },
                    x: {
                        ticks: {
                            padding: 10,
                            autoSkip: false,
                            font: {
                                weight: 'bold',
                                size: 13
                            }
                        },
                        offset: true
                    }
                }
            }
        });



        // Datos para el Mapa - Paises de destino
        const paisesDestino = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.PaisesDestino));
        const mapa = L.map('mapaPaises').setView([0, 0], 1);
        L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
            attribution: 'Mapa de destinos',
            subdomains: 'abcd',
            maxZoom: 15
        }).addTo(mapa);
        paisesDestino.forEach(pais => {
            const nombrePais = pais.Pais;

            fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(nombrePais)}&format=json`)
                .then(res => res.json())
                .then(data => {
                    if (data.length > 0) {
                        const { lat, lon } = data[0];
                        L.marker([lat, lon])
                            .addTo(mapa)
                            .bindPopup(`<strong>${nombrePais}</strong><br>Cantidad: ${pais.Cantidad}`);
                    }
                })
                .catch(err => console.error(`Error al buscar la ubicación para ${nombrePais}:`, err));
        });

    </script>
</body>
<script src="~/js/quagga.min.js"></script>
<script src="~/js/especialista.js"></script>
</html>
